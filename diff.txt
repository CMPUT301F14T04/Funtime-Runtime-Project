diff --git a/diff.txt b/diff.txt
index 5c55e87..e69de29 100644
--- a/diff.txt
+++ b/diff.txt
@@ -1,429 +0,0 @@
-diff --git a/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/AuthorQuestionActivity.java b/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/AuthorQuestionActivity.java
-index 6b6cf11..ce020fd 100644
---- a/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/AuthorQuestionActivity.java
-+++ b/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/AuthorQuestionActivity.java
-@@ -121,6 +121,7 @@ public class AuthorQuestionActivity extends CustomActivity {
- 	 * @param v is a button within the activity.
- 	 */
- 	public void submitQuestion(View v) {
-+		
- 		question = new Question(questionTitle.getText().toString(),questionBody.getText().toString(),username.toString());
- 		questionList = ApplicationState.getQuestionList(this);
- 		userQuestionIdList = account.getQuestionList();
-@@ -138,7 +139,11 @@ public class AuthorQuestionActivity extends CustomActivity {
- 		generateId(question);		
- 		//ApplicationState.addServerQuestions(question, this);
- 		
-+		Log.i("AuthorQuestion", "AuthorQuestion starting");
-+		
- 		account.authorQuestion(question, this);
-+		
-+		Log.i("AuthorQuestion", "AuthorQuestion finished");
- 
- 		Bundle bundle = new Bundle();
- 		bundle.putSerializable("Question", question);
-diff --git a/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/HomeActivity.java b/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/HomeActivity.java
-index 388f4c1..dd0b0d3 100644
---- a/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/HomeActivity.java
-+++ b/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/HomeActivity.java
-@@ -4,6 +4,7 @@ import java.util.ArrayList;
- 
- import android.content.Intent;
- import android.os.Bundle;
-+import android.util.Log;
- import android.view.ContextMenu;
- import android.view.ContextMenu.ContextMenuInfo;
- import android.view.Menu;
-@@ -58,11 +59,15 @@ public class HomeActivity extends CustomActivity {
- 			ApplicationState.startup(this);	
- 		}
- 		
-+		Log.i("HomeActivity", "Startup done");
-+		
- 		loggedIn = ApplicationState.isLoggedIn();
- 		if (loggedIn) {
- 			account = ApplicationState.getAccount();
- 		} 
- 		
-+		Log.i("HomeActivity", "Login check done");
-+		
- 		homeListView = (ListView) findViewById(R.id.questionListView);
- 
- 		//homeQuestionList = new ArrayList<Question>();
-@@ -70,13 +75,17 @@ public class HomeActivity extends CustomActivity {
- 		homeQuestionList = ApplicationState.getQuestionList(this);
- 		//loadServerQuestions();
- 
-+		Log.i("HomeActivity", "Retrieved question list");
-+		
- 		sorter = new QuestionSorter(homeQuestionList);
--		//testHome(); // temporary test code
- 
-+		Log.i("HomeActivity", "Sorted");
-+		
- 		account = ApplicationState.getAccount();
- 		adapter = new QuestionListAdapter(this, R.layout.question_list_adapter,
- 				homeQuestionList);
- 
-+		
- 		homeListView.setAdapter(adapter);
- 		sorter.sortByDate();
- 		adapter.notifyDataSetChanged();
-@@ -90,6 +99,9 @@ public class HomeActivity extends CustomActivity {
- 		});
- 
- 		registerForContextMenu(homeListView);
-+		
-+		Log.i("HomeActivity", "onCreate finished");
-+		
- 	}
- 
- //	private void loadServerQuestions() {
-@@ -145,6 +157,7 @@ public class HomeActivity extends CustomActivity {
- 
- 	@Override
- 	public void refresh() {
-+		
- 		String sortType = sorter.getSortType();
- 		ApplicationState.refresh(this);
- 		homeQuestionList = ApplicationState.getQuestionList(this);
-@@ -155,6 +168,7 @@ public class HomeActivity extends CustomActivity {
- 		} else if (sortType.equals("Photo")) {
- 			sorter.sortByPhoto();
- 		}
-+		
- 		adapter.notifyDataSetChanged();
- 	}
- 
-diff --git a/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/QuestionPageActivity.java b/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/QuestionPageActivity.java
-index ef1f1e8..9d9598e 100644
---- a/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/QuestionPageActivity.java
-+++ b/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/QuestionPageActivity.java
-@@ -125,6 +125,7 @@ public class QuestionPageActivity extends CustomActivity {
- 		
- 		ApplicationState.cacheQuestion(question, this);
- 		
-+		/*
- 		boolean loggedIn = ApplicationState.isLoggedIn();
- 		if (loggedIn) {
- 			
-@@ -170,10 +171,9 @@ public class QuestionPageActivity extends CustomActivity {
- 			}
- 			
- 			
--			//account.addToHistory(question);
- 			
- 
--		}
-+		}*/
- 		
- 		if (question.getPhotoStatus()){
- 				photo_button.setColorFilter(has_photo_color);
-diff --git a/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/classes/Account.java b/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/classes/Account.java
-index 8555eea..e1c429b 100644
---- a/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/classes/Account.java
-+++ b/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/classes/Account.java
-@@ -5,6 +5,7 @@ import java.util.ArrayList;
- 
- import android.app.Activity;
- import android.content.Context;
-+import android.util.Log;
- 
- 
- /**
-@@ -85,10 +86,18 @@ public class Account implements Serializable {
- 	 * 						been added to the master questsion list
- 	 */
- 	public void authorQuestion(Question question, Context context) {
-+		Log.i("AuthorQuestion", "Adding to question list");
- 		questionList.add(question.getId());
-+		Log.i("AuthorQuestion", "added");
-+		Log.i("AuthorQuestion", "Updating account");
- 		ApplicationState.updateAccount(context);
-+		Log.i("AuthorQuestion", "updated");
-+		Log.i("AuthorQuestion", "Adding server question");
- 		ApplicationState.addServerQuestions(question, context);
-+		Log.i("AuthorQuestion", "added");
-+		Log.i("AuthorQuestion", "Cacheing question");
- 		ApplicationState.cacheQuestion(question, context);
-+		Log.i("AuthorQuestion", "Cached");
- 	}
- 
- 	/**
-diff --git a/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/classes/ApplicationState.java b/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/classes/ApplicationState.java
-index 1b82adc..c009964 100644
---- a/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/classes/ApplicationState.java
-+++ b/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/classes/ApplicationState.java
-@@ -1,12 +1,14 @@
- package ca.ualberta.cs.funtime_runtime.classes;
- 
- import java.util.ArrayList;
-+import java.util.Queue;
- 
- import android.app.Activity;
- import android.app.Application;
- import android.content.Context;
- import android.net.ConnectivityManager;
- import android.net.NetworkInfo;
-+import android.util.Log;
- import android.widget.Toast;
- import ca.ualberta.cs.funtime_runtime.adapter.QuestionListAdapter;
- import ca.ualberta.cs.funtime_runtime.elastic.ESAccountManager;
-@@ -31,6 +33,7 @@ public class ApplicationState extends Application {
- 	private static Account account;
- 	private static ArrayList<Question> questionList = new ArrayList<Question>();
- 	private static ArrayList<Question> cachedQuestions = new ArrayList<Question>();
-+	private static ArrayList<Question> offlineQuestions = new ArrayList<Question>();
- 	
- 	/* Questions and answers that are passable between activities.
- 	* This will save the reference, while passing via intent will not.
-@@ -45,12 +48,13 @@ public class ApplicationState extends Application {
- 	private static boolean loggedIn = false;
- 	
- 	public static boolean firstLaunch = true;
--	
-+	public static boolean lastKnownNetworkStatus = false;
- 	//private static boolean online = false;
- 	
- 	private static final String USERACCOUNT = "UserAccount.sav";
- 	private static final String CACHEDACCOUNT = "CachedAccount.sav";
- 	private static final String CACHEDQUESTIONS = "CachedQuestions.sav";
-+	private static final String OFFLINEQUESTIONS = "OfflineQuestions.sav";
- 	
- 	private static ESQuestionManager questionManager;
- 	private static ESAccountManager accountManager;
-@@ -66,7 +70,7 @@ public class ApplicationState extends Application {
- 			questionManager = new ESQuestionManager();
- 			accountManager = new ESAccountManager();
- 			questionList = new ArrayList<Question>();
--			loadServerQuestions();
-+			loadServerQuestions(ctx);
- 		} else {
- 			String offlineNotice;
- 			offlineNotice = "No Connection Available";
-@@ -84,15 +88,20 @@ public class ApplicationState extends Application {
- 		return firstLaunch;
- 	}
- 	
--	public static void loadServerQuestions() {
--		Thread loadThread = new SearchQuestionThread("*");
--		//Thread loadThread = new LoadHomeThread("*", homeQuestionList, adapter);
--		loadThread.start();	
--		
--		try {
--			loadThread.join();
--		} catch (InterruptedException e) {
--			e.printStackTrace();
-+	public static void loadServerQuestions(Context context) {
-+		if ( (ApplicationState.isOnline(context)) ) {
-+			Log.i("HomeActivity", "online passed");
-+			Thread loadThread = new SearchQuestionThread("*");
-+			//Thread loadThread = new LoadHomeThread("*", homeQuestionList, adapter);
-+			loadThread.start();	
-+			
-+			try {
-+				loadThread.join();
-+			} catch (InterruptedException e) {
-+				e.printStackTrace();
-+			}
-+		} else {
-+			Log.i("HomeActivity", "loadServer online failed ");
- 		}
- 	}
- 	
-@@ -115,12 +124,14 @@ public class ApplicationState extends Application {
- 	}
- 	
- 	public static void loadServerAccounts() {
--		Thread accountThread = new SearchAccountThread("*");
--		accountThread.start();
--		try {
--			accountThread.join();
--		} catch (InterruptedException e) {
--			e.printStackTrace();
-+		if (lastKnownOnlineStatus()) {
-+			Thread accountThread = new SearchAccountThread("*");
-+			accountThread.start();
-+			try {
-+				accountThread.join();
-+			} catch (InterruptedException e) {
-+				e.printStackTrace();
-+			}
- 		}
- 		
- 	}
-@@ -170,22 +181,40 @@ public class ApplicationState extends Application {
- 	}
- 	
- 	public static void loadBySearch(String search) {
--		ApplicationState.questionList.clear();
--		ApplicationState.questionList.addAll(questionManager.searchQuestions(search, null));	
-+		if (lastKnownOnlineStatus()) {
-+			ApplicationState.questionList.clear();
-+			ApplicationState.questionList.addAll(questionManager.searchQuestions(search, null));	
-+		}
- 	}
- 	
- 	public static void loadAccounts(String search) {
--		ApplicationState.accountList.clear();
--		ApplicationState.accountList.addAll(accountManager.searchAccounts(search, null));	
--		
-+		if (lastKnownOnlineStatus()) {
-+			ApplicationState.accountList.clear();
-+			ApplicationState.accountList.addAll(accountManager.searchAccounts(search, null));	
-+		}
- 	}
- 	
- 	public static void refresh(Context context) {
-+		
-+		loadCachedQuestions(context);
-+		updateAccount(context);
-+		
- 		if ( (ApplicationState.isOnline(context)) ) {
--			loadServerQuestions();
-+			loadOfflineQuestions(context);
-+			pushOfflineQuestions(context);
-+			loadServerQuestions(context);
-+		} else {
-+			questionList = cachedQuestions;
- 		}
- 	}
- 	
-+	public static void pushOfflineQuestions(Context context) {
-+		while ( !(offlineQuestions.isEmpty()) ) {
-+			addServerQuestions(offlineQuestions.remove(0), context);
-+		}
-+
-+	}
-+	
- 	
- 	/**
- 	 * Sets the currently logged in account
-@@ -193,6 +222,7 @@ public class ApplicationState extends Application {
- 	 */
- 	public static void setAccount(Account newAccount, Context ctx) {
- 		saveManager.save(USERACCOUNT, newAccount.getName(), ctx);
-+		saveManager.save(CACHEDACCOUNT, newAccount, ctx);
- 		Toast.makeText(ctx, "Logged in as " + newAccount.getName(), Toast.LENGTH_LONG).show();
- 		account = newAccount;
- 		loggedIn = true;
-@@ -211,11 +241,18 @@ public class ApplicationState extends Application {
- 		NetworkInfo netInfo = connManager.getActiveNetworkInfo();
- 		if (netInfo == null) {
- 		    // There are no active networks.
--		    return false;
-+			lastKnownNetworkStatus = false;
-+			return false;
- 		}
-+		lastKnownNetworkStatus = true;
- 		return netInfo.isConnected();
- 	}
- 	
-+	public static boolean lastKnownOnlineStatus() {
-+		// Adapted from http://stackoverflow.com/questions/2789612/how-can-i-check-whether-an-android-device-is-connected-to-the-web - 2014-11-21
-+		return lastKnownNetworkStatus;
-+	}
-+	
- 	
- 	
- 	/**
-@@ -303,16 +340,39 @@ public class ApplicationState extends Application {
- 	}
- 	
- 	public static void addServerQuestions(Question question, Context context) {
--		Thread addThread = new AddQuestionThread(question, context);
--		addThread.start();
-+		if ( (ApplicationState.isOnline(context)) ) {
-+			Thread addThread = new AddQuestionThread(question, context);
-+			addThread.start();
-+			try {
-+				addThread.join();
-+			} catch (InterruptedException e) {
-+				e.printStackTrace();
-+			}
-+		} else {
-+			if ( !(offlineQuestions.contains(question)) ) {
-+				offlineQuestions.add(question);
-+				saveManager.save(OFFLINEQUESTIONS, offlineQuestions, context);
-+			}
-+		}
-+		
-+	}
-+	
-+	public static void loadOfflineQuestions(Context context) {
-+		offlineQuestions = new ArrayList<Question>();
-+		
-+		Object obj;
- 		try {
--			addThread.join();
--		} catch (InterruptedException e) {
-+			obj = saveManager.load(OFFLINEQUESTIONS, context);
-+			if (obj != null) {
-+				offlineQuestions.addAll( (ArrayList<Question>) obj);
-+			}
-+		} catch (ClassNotFoundException e) {
-+			// TODO Auto-generated catch block
- 			e.printStackTrace();
- 		}
--		
- 	}
- 	
-+	
- 	public static void updateServerQuestion(Question question) {
- 		Thread updateThread = new UpdateQuestionThread(question);
- 		updateThread.start();
-@@ -337,23 +397,28 @@ public class ApplicationState extends Application {
- 	public static void updateAccount(Context context) {
- 		// TODO Add checks for online vs offline
- 		saveManager.save(CACHEDACCOUNT, account, context);
--		UpdateAccountThread accountThread = new UpdateAccountThread(account);
--		accountThread.start();
--		try {
--			accountThread.join();
--		} catch (InterruptedException e) {
--			e.printStackTrace();
--		}
- 		
-+		if ( (ApplicationState.isOnline(context)) ) {
-+			Log.i("OnlinePass", "Online check passed");
-+			UpdateAccountThread accountThread = new UpdateAccountThread(account);
-+			accountThread.start();
-+			try {
-+				accountThread.join();
-+			} catch (InterruptedException e) {
-+				e.printStackTrace();
-+			}
-+		}
- 	}
- 	
- 	public static void searchQuery(String query, ArrayList<Question> list, QuestionListAdapter adapter, Activity act) {
--		Thread thread = new SearchActivityThread(query, list, adapter, act);
--		thread.start();
--		try {
--			thread.join();
--		} catch (InterruptedException e) {
--			e.printStackTrace();
-+		if (lastKnownOnlineStatus()) {
-+			Thread thread = new SearchActivityThread(query, list, adapter, act);
-+			thread.start();
-+			try {
-+				thread.join();
-+			} catch (InterruptedException e) {
-+				e.printStackTrace();
-+			}
- 		}
- 	}
- 
-diff --git a/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/classes/Question.java b/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/classes/Question.java
-index 5657692..68f404e 100644
---- a/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/classes/Question.java
-+++ b/Funtime-Runtime/src/ca/ualberta/cs/funtime_runtime/classes/Question.java
-@@ -256,7 +256,7 @@ public class Question implements Serializable {
-              return false;
-     	}
-     	Question other = (Question) obj;
--    	return (other.getId().equals(this.getId()));
-+    	return (other.getId() == (this.getId()));
-     }
- 	
- }
